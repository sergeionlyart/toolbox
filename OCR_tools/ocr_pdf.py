#!/usr/bin/env python3
# python3 ocr_pdf.py
""" 
‚∏ª

üìÑ OCR PDF Processor

OCR PDF Processor ‚Äî —ç—Ç–æ Python-—Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —Å –ø–æ–º–æ—â—å—é OCR-—Å–µ—Ä–≤–∏—Å–∞ –æ—Ç Mistral AI, –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ:
	‚Ä¢	üìë DOCX-—Ñ–∞–π–ª–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
	‚Ä¢	üóÑ JSON-—Ñ–∞–π–ª–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ OCR (—Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64).

‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
	‚Ä¢	–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö, —Ç–∞–∫ –∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö PDF-—Ñ–∞–π–ª–æ–≤.
	‚Ä¢	–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ API Mistral OCR.
	‚Ä¢	–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã DOCX-—Ñ–æ—Ä–º–∞—Ç.
	‚Ä¢	–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π JSON-–æ—Ç—á—ë—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ OCR.

üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π:

python ocr_pdf.py "<–ø—É—Ç—å_–∏–ª–∏_URL_–∫_PDF>"

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:

python ocr_pdf.py "file:///–ø—É—Ç—å/–∫/–¥–æ–∫—É–º–µ–Ω—Ç—É.pdf"

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:
	‚Ä¢	DOCX-—Ñ–∞–π–ª: docs/processed/
	‚Ä¢	JSON-—Ñ–∞–π–ª: docs/JSON_data/

üõ† –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
	‚Ä¢	mistralai
	‚Ä¢	requests
	‚Ä¢	python-docx
	‚Ä¢	Pillow

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:

pip install mistralai requests python-docx Pillow

–¢–∞–∫–∂–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–∞—à API-–∫–ª—é—á Mistral AI.

‚∏ª

–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.



"""

#!/usr/bin/env python3

import sys
import logging
import requests
import shutil
from urllib.parse import urlparse, unquote
from pathlib import Path
from mistralai import Mistral, DocumentURLChunk, OCRResponse
import re
import base64
import json
from io import BytesIO
from docx import Document
from PIL import Image  # (–ø–æ –∂–µ–ª–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
from docx.image.exceptions import UnrecognizedImageError
from multi_tenant_config import MISTRAL_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

# ---------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ---------------------------

def replace_images_in_markdown(markdown_str: str, images_dict: dict) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–∏–¥–∞ ![imgId](imgId) –Ω–∞ base64-encoded –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    for img_name, base64_str in images_dict.items():
        markdown_str = markdown_str.replace(
            f"![{img_name}]({img_name})",
            f"![{img_name}](data:image/png;base64,{base64_str})"
        )
    return markdown_str

def get_combined_markdown(ocr_response: OCRResponse) -> str:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã OCR-–æ—Ç–≤–µ—Ç–∞ –≤ –µ–¥–∏–Ω—ã–π Markdown.
    """
    markdowns = []
    for page in ocr_response.pages:
        image_data = {img.id: img.image_base64 for img in page.images}
        markdowns.append(replace_images_in_markdown(page.markdown, image_data))
    return "\n\n".join(markdowns)

def save_markdown_with_images_to_docx(markdown_text: str, filename: str):
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ markdown-—Ç–µ–∫—Å—Ç–∞ —Å base64-–∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
    —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å DOCX-–¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
      markdown_text: –∏—Ç–æ–≥–æ–≤—ã–π markdown-—Ç–µ–∫—Å—Ç (—Å base64 –≤–º–µ—Å—Ç–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
      filename: –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'output.docx')
    """
    import re
    import base64
    from io import BytesIO
    from docx import Document

    # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–∏–¥–∞ ![alt](data:image/png;base64,....)
    image_pattern = r'!\[(.*?)\]\(\s*(data:image/(?:png|jpg|jpeg|gif);base64,([^)]*))\)'

    document = Document()

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    lines = markdown_text.split('\n')
    for line in lines:
        # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        matches = re.findall(image_pattern, line)

        if matches:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            text_only = re.sub(image_pattern, '', line).strip()
            if text_only:
                document.add_paragraph(text_only)

            # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ–∑–¥–∞—ë–º –∞–±–∑–∞—Ü + run
            from PIL import Image

            for alt_text, full_data_string, b64_data in matches:
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/...;base64, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if full_data_string.startswith("data:image"):
                    b64_data_clean = full_data_string.split("base64,")[-1]
                else:
                    b64_data_clean = b64_data

                image_data = base64.b64decode(b64_data_clean)
                image_stream = BytesIO(image_data)

                try:
                    with Image.open(image_stream) as img:
                        image_format = img.format if img.format else 'PNG'
                        image_stream.seek(0)

                        run = document.add_paragraph().add_run()
                        run.add_picture(image_stream)
                except Exception as img_err:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_err}")
        else:
            # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            document.add_paragraph(line)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–∞–π–ª
    document.save(filename)
    logging.info(f"DOCX —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ '{filename}'.")

# ---------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ —Å–µ—Ç–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
# ---------------------------

def process_pdf_from_url(pdf_url: str, output_dir: Path):
    """
    1. –ü–æ–ª—É—á–∞–µ–º PDF (–ª–æ–∫–∞–ª—å–Ω—ã–π/—É–¥–∞–ª—ë–Ω–Ω—ã–π).
    2. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Mistral.
    3. OCR -> –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏
    4. –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ dev_lab/docs/JSON_data/
    5. –§–æ—Ä–º–∏—Ä—É–µ–º Markdown + DOCX
    """
    try:
        logging.info(f"Starting processing for URL: {pdf_url}")
        client = Mistral(api_key=MISTRAL_API_KEY)

        parsed_url = urlparse(pdf_url)
        pdf_name = Path(unquote(parsed_url.path)).stem
        output_filename = output_dir / f"{pdf_name}_ocr_processed.docx"

        local_pdf_path = Path("temp.pdf")

        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if parsed_url.scheme == 'file':
            local_file_path = Path(unquote(parsed_url.path))
            logging.info(f"Copying local PDF from {local_file_path}...")
            shutil.copy(local_file_path, local_pdf_path)
            logging.info("PDF copied successfully.")
        else:
            logging.info(f"Downloading PDF from {pdf_url}...")
            resp = requests.get(pdf_url, timeout=30)
            resp.raise_for_status()
            local_pdf_path.write_bytes(resp.content)
            logging.info("PDF downloaded successfully.")

        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ Mistral
        logging.info("Uploading PDF to Mistral...")
        uploaded_file = client.files.upload(
            file={
                "file_name": local_pdf_path.stem,
                "content": local_pdf_path.read_bytes(),
            },
            purpose="ocr",
        )
        logging.info("PDF uploaded successfully.")

        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL –¥–ª—è OCR
        logging.info("Getting signed URL...")
        signed_url = client.files.get_signed_url(file_id=uploaded_file.id, expiry=1)
        logging.info(f"Signed URL obtained: {signed_url.url}")

        # 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OCR
        logging.info("Starting OCR processing...")
        pdf_response = client.ocr.process(
            document=DocumentURLChunk(document_url=signed_url.url),
            model="mistral-ocr-latest",
            include_image_base64=True
        )
        logging.info("OCR processing completed.")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
        json_data_dir = Path(__file__).parent / "docs/JSON_data"
        json_data_dir.mkdir(parents=True, exist_ok=True)
        json_path = json_data_dir / f"{pdf_name}.json"

        response_dict = pdf_response.model_dump()
        with json_path.open('w', encoding='utf-8') as f:
            json.dump(response_dict, f, ensure_ascii=False, indent=2)
        logging.info(f"JSON data saved to '{json_path}'")

        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è markdown –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DOCX
        logging.info("Generating markdown from OCR response...")
        combined_md = get_combined_markdown(pdf_response)
        save_markdown_with_images_to_docx(str(combined_md), str(output_filename))

    except Exception as e:
        logging.exception(f"An error occurred: {e}")
    finally:
        if local_pdf_path.exists():
            local_pdf_path.unlink(missing_ok=True)
            logging.info("Temporary PDF file removed.")

    logging.info(f"Process finished. Output at '{output_filename}'.")

# ---------------------------
# –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
# ---------------------------

if __name__ == "__main__":
    if len(sys.argv) != 2:
        logging.error("Usage: python ocr_pdf.py <absolute_pdf_url>")
        sys.exit(1)

    pdf_url = sys.argv[1]
    output_directory = Path(__file__).parent / "docs/processed"
    process_pdf_from_url(pdf_url, output_directory)